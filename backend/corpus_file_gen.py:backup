# Copyright 2017, Mycroft AI Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import re
import nltk
import wikipedia as wiki
#from adapt.intent import IntentBuilder


#from mycroft.skills.core import MycroftSkill, intent_handler, intent_file_handler
#from mycroft.util.log import LOG


# Tests:  tell me about john

class Name:
#    self._lookup(wiki.random(pages=1))
#    print ("no answer found:")
#if __name__ == '__main__':
#    def main(self):
#        print ("test23")
    def __init__(self):
        print ("start:""\n")
        #self._lookup(wiki.random(pages=1))
        random_art = self.lookup(wiki.random(pages=1))
        if random_art == None:
            return
        #f = random_art.find(random_art, ch)
            print ("random_artf: ""\n" + str(f))
        else:
            print ("random_art1: ""\n" + str(random_art))
            random_result = ("")
            i = 0
            while i <= 0:
                #result = nltk.sent_tokenize(random_art,language='german')
                result = re.split(r"[a-z][?!.] ", random_art) [1:] #[\s\n]
                #print result.groups()
                print ("print result:" "\n" + str(result))
                print ("\n".join(result))
                if len(result) > 320:
                    #print ("error" + str(len(result))
                    i = i + 1
                else:
                    #answer = random_result + "\n" + result + "   " + str(len(result))
                    #random_result = answer
                    i = i + 1
            else:
                print ("no data")
                print ("random_result: ""\n" + str(random_result))
        #filter = random_art(bool, map(str.strip, f.read().split('.')))
        #print ("random_art: " "\n"+ str(filter))

    def lookup(self, search):
        print ("test loop:")
        try:
            # Use the version of Wikipedia appropriate to the request language
            #dict = self.translate_namedvalues("wikipedia_lang")
            #dict = self.translate_namedvalues("wikipedia_lang")
            wiki.set_lang("de")

            # Talk to the user, as this can take a little time...
            #self.speak_dialog("searching", {"query": search})

            # First step is to get wiki article titles.  This comes back
            # as a list.  I.e. "beans" returns ['beans',
            #     'Beans, Beans the Music Fruit', 'Phaseolus vulgaris',
            #     'Baked beans', 'Navy beans']
            results = wiki.search(search, 5)
            print ("results 1: " + str(results))
            if len(results) == 0:
                print ("no answer found:")
                return None
            # Now request the summary for the first (best) match.  Wikipedia
            # writes in inverted-pyramid style, so the first sentence is the
            # most important, the second less important, etc.  Two sentences
            # is all we ever need.
            lines = 10
            #summary = wiki.summary(results[0], lines)
            summary = wiki.summary(results[0], lines)
            print ("summary 1: ""\n" + str(summary))
            #if "==" in len(summary) > 250:
             #   return ("")
            #while summary or len(summary) > 5:
                # We hit the end of the article summary or hit a really long
                # one.  Reduce to first line.
            #    lines = 20
             #   summary = wiki.summary(results[0], lines)
             #   print ("summary 2: " + str(summary))

            # Now clean up the text and for speaking.  Remove words between
            # parenthesis and brackets.  Wikipedia often includes birthdates
            # in the article title, which breaks up the text badly.
            summary = re.sub(r'\([^)]*\)|/[^/]*/','', summary)


            # print results
            #print ("the answer is: ""\n"+ str(summary))
            return summary
       # except wiki.exceptions.DisambiguationError as e:
            # Test:  "tell me about john"
        #    options = e.options[:5]

         #   option_list = (", ".join(options[:-1]) + " " +
            #            self.translate("or") + " " + options[-1])
            #choice = self.get_response('disambiguate',
            #                           data={"options": option_list})
            #if choice:
            #    self._lookup(choice)

        except Exception as e:
            print ("Error: {0}".format(e))
            #LOG.error("Error: {0}".format(e))


if __name__ == "__main__":
    objName = Name()
    #objName.main()
    #main()
